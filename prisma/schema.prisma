generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider  = "postgresql"
	url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
	directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
	id            String    @id @default(cuid())
	name          String?
	email         String    @unique
	emailVerified DateTime?
	image         String?
	password      String?
	phone         String?
	role          String    @default("USER")
	accounts      Account[]
	sessions      Session[]
	times         Times[]
	executor      Todo[]

	projects UsersOnProjects[]

	companyId String?
	company   Company? @relation(fields: [companyId], references: [id])

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Account {
	userId            String
	type              String
	provider          String
	providerAccountId String
	refresh_token     String?
	access_token      String?
	expires_at        Int?
	token_type        String?
	scope             String?
	id_token          String?
	session_state     String?

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@id([provider, providerAccountId])
}

model Session {
	sessionToken String   @unique
	userId       String
	expires      DateTime
	user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model VerificationToken {
	identifier String
	token      String
	expires    DateTime

	@@id([identifier, token])
}

model Times {
	id     String @id @default(cuid())
	userId String
	times  Int
	date   String
	month  Int

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
	id        String     @id @default(cuid())
	name      String
	users     User[]
	materials Material[]
	projects  Project[]
}

model Project {
	id         String  @id @default(cuid())
	name       String
	designUrl  String?
	gitHub     String?
	imgUrl     String?
	projectUrl String?

	materials Material[]

	companyId String
	company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

	users UsersOnProjects[]
	todo  Todo[]
}

model UsersOnProjects {
	user   User   @relation(fields: [userId], references: [id])
	userId String

	project   Project @relation(fields: [projectId], references: [id])
	projectId String

	isCurrent Boolean @default(false)

	@@id([userId, projectId])
}

model Todo {
	id          String  @id @default(cuid())
	name        String
	description String?
	isCompleted Boolean @default(false)

	projectId String
	project   Project? @relation(fields: [projectId], references: [id])

	executorId String
	executor   User   @relation(fields: [executorId], references: [id])

	todoStatus   TodoStatus @relation(fields: [todoStatusId], references: [id])
	todoStatusId String
}

model TodoStatus {
	id    String @id @default(cuid())
	label String
	color String

	todo Todo[]
}

model Material {
	id          String  @id @default(cuid())
	name        String
	description String?
	sourceLink  String

	categoryId String
	category   MaterialCategory @relation(fields: [categoryId], references: [id])

	projectId String?
	project   Project? @relation(fields: [projectId], references: [id])

	companyId String
	company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model MaterialCategory {
	id    String @id @default(cuid())
	label String
	color String

	material Material[]
}
