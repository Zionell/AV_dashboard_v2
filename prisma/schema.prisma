generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    phone         String?
    role          String    @default("USER")
    accounts      Account[]
    sessions      Session[]
    times         Times[]
    executor      Todo[]

    projects UsersOnProjects[]

    companyId String?  @db.ObjectId
    company   Company? @relation(fields: [companyId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Times {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    times  Int
    date   String
    month  Int

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    users     User[]
    materials Material[]
    projects  Project[]
}

model Project {
    id         String  @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    designUrl  String?
    gitHub     String?
    imgUrl     String?
    projectUrl String?

    materials Material[]

    companyId String  @db.ObjectId
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    users UsersOnProjects[]
    todo  Todo[]
}

model UsersOnProjects {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])
    userId String @db.ObjectId

    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @db.ObjectId

    isCurrent Boolean @default(false)
}

model Todo {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    isCompleted Boolean @default(false)

    projectId String   @db.ObjectId
    project   Project? @relation(fields: [projectId], references: [id])

    executorId String @db.ObjectId
    executor   User   @relation(fields: [executorId], references: [id])

    todoStatus   TodoStatus @relation(fields: [todoStatusId], references: [id])
    todoStatusId String     @db.ObjectId
}

model TodoStatus {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    label String
    color String

    todo Todo[]
}

model Material {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    sourceLink  String

    categoryId String           @db.ObjectId
    category   MaterialCategory @relation(fields: [categoryId], references: [id])

    projectId String?  @db.ObjectId
    project   Project? @relation(fields: [projectId], references: [id])

    companyId String  @db.ObjectId
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model MaterialCategory {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    label String
    color String

    material Material[]
}
